#!/usr/bin/env python3
# rhythmpedia dispatcher â€” pass-through, no chdir. Includes `list`.
import os, sys
from pathlib import Path
from shutil import which

def list_local(bin_dir: Path) -> list[str]:
    names = set()
    for p in bin_dir.glob("rhythmpedia-*"):
        if p.is_file():
            base = p.name.split(".", 1)[0]
            names.add(base.replace("rhythmpedia-", ""))
    return sorted(names)

def list_path_plugins(local: set[str]) -> list[str]:
    out = set()
    for part in os.environ.get("PATH", "").split(":"):
        d = Path(part)
        if not d.is_dir(): continue
        for f in d.glob("rhythmpedia-*"):
            if not f.is_file(): continue
            name = f.name.split(".", 1)[0].replace("rhythmpedia-", "")
            if name not in local and os.access(f, os.X_OK):
                out.add(name)
    return sorted(out)

def resolve_target(bin_dir: Path, cmd: str) -> Path | None:
    base = f"rhythmpedia-{cmd}"
    for c in (bin_dir / base, bin_dir / (base + ".py"), bin_dir / (base + ".sh")):
        if c.exists(): return c
    found = which(base, path=os.environ.get("PATH"))
    return Path(found) if found else None

def exec_target(target: Path, args: list[str], env: dict) -> "NoReturn":
    if target.suffix == ".py":
        os.execvpe(sys.executable, [sys.executable, str(target), *args], env)
    elif os.access(target, os.X_OK):
        os.execvpe(str(target), [str(target), *args], env)
    else:
        os.execvpe("bash", ["bash", str(target), *args], env)

def main() -> None:
    if len(sys.argv) < 2:
        print("Usage: rhythmpedia <command> [args...]\n       rhythmpedia list")
        sys.exit(1)
    cmd, *rest = sys.argv[1:]

    bin_dir = Path(__file__).resolve().parent
    root = bin_dir.parent.parent  # project root
    env = os.environ.copy()

    # Prepend venv/bin (if present) and this bin/ so subs resolve cleanly
    venv_bin = root / ".venv" / "bin"
    parts = []
    if venv_bin.is_dir():
        parts.append(str(venv_bin))
        env.setdefault("VIRTUAL_ENV", str(venv_bin.parent))
    parts.append(str(bin_dir))
    env["PATH"] = ":".join(parts + [env.get("PATH", "")])

    if cmd in ("list", "help-commands"):
        local = list_local(bin_dir)
        plugins = list_path_plugins(set(local))
        print("Local:", ", ".join(local) if local else "(none)")
        print("PATH :", ", ".join(plugins) if plugins else "(none)")
        sys.exit(0)

    target = resolve_target(bin_dir, cmd)
    if not target:
        print(f"rhythmpedia: unknown command: {cmd}")
        print("Try:  rhythmpedia list")
        sys.exit(1)

    # No chdir. Pass args as-is (or none if none were provided).
    exec_target(target, rest, env)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(130)

